{"version":3,"sources":["const.js","action.js","reduxExample.js","App.js","reportWebVitals.js","rootReduser.js","reducer.js","store.js","index.js"],"names":["SERVER_DATA","getServerData","dispatch","fetch","then","response","status","json","console","log","data","type","payload","catch","error","ReduxExample","this","props","className","Object","keys","map","item","index","Component","connect","state","ownProps","server","bindActionCreators","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","action","store","createStore","combineReducers","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAAaA,EAAc,cCEdC,EAAgB,kBAAM,SAAEC,GACjCC,MAAM,gDACLC,MAAK,SAAAC,GACF,GAAuB,MAApBA,EAASC,OAET,OAAQD,EAASE,OAEVC,QAAQC,IAAI,uBAEzBL,MAAK,SAAAM,GACFF,QAAQC,IAAIC,EAAM,QAClBR,EAAS,CACLS,KAAMX,EACNY,QAASF,OAGhBG,OAAM,SAAAC,GAAK,OAAIN,QAAQC,IAAIK,Q,qBCbzBC,E,uKAKF,WACIC,KAAKC,MAAMhB,kB,oBAEhB,WAAU,IAAD,OACL,OAEI,qBAAKiB,UAAU,OAAf,SACCC,OAAOC,KAAKJ,KAAKC,MAAMP,MAAMW,KAAI,SAACC,EAAMC,GAGrC,OAFAf,QAAQC,IAAIa,GAGZ,sBAAKJ,UAAU,MAAf,UACI,6BAAMI,IACN,sCAAO,EAAKL,MAAMP,KAAKY,QAFAC,Y,GAhBfC,aA2CRC,eAdK,SAACC,EAAOC,GAC7B,MAAO,CACLjB,KAAMgB,EAAME,WAIU,SAAC1B,EAAUyB,GACnC,OAAOE,YACH,CACI5B,iBAEJC,KAGYuB,CAA6CV,GCpClDe,MARf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAAC,EAAD,OCKSa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,eCDCO,EAJK,CAChBX,OCA0B,WAAyB,IAAxBF,EAAuB,uDAAf,GAAIc,EAAW,uCAElD,OADAhC,QAAQC,IAAI+B,EAAO5B,SACZ4B,EAAO7B,MACV,KAAKX,EAEL,OAAO,2BACA0B,GACAc,EAAO5B,SAEd,QACA,OAAOc,KCLAe,EAFDC,YAAYC,YAAgBJ,GAAcK,YAAgBC,MCExEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,QAIJQ,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.6d288266.chunk.js","sourcesContent":["export const SERVER_DATA = 'SERVER_DATA';","import { SERVER_DATA } from './const';\r\n\r\nexport const getServerData = () => ( dispatch ) => {\r\n    fetch('https://jsonplaceholder.typicode.com/todos/1')  \r\n    .then(response => {\r\n        if(response.status === 200){\r\n            // console.log(response, \"response\")\r\n           return  response.json()\r\n             }\r\n             else console.log(\"we have an error\")\r\n        })\r\n    .then(data => {\r\n        console.log(data, \"data\")\r\n        dispatch({\r\n            type: SERVER_DATA,\r\n            payload: data\r\n        })\r\n    })\r\n    .catch(error => console.log(error))\r\n}\r\n\r\n\r\n// const axios = require('axios');\r\n// export const getServerData = () => ( dispatch ) => {\r\n\r\n// // Make a request for a user with a given ID\r\n// axios.get('https://jsonplaceholder.typicode.com/todos')\r\n//   .then(function (response) {\r\n//     console.log(response);\r\n                    \r\n//     return  response.data[0];\r\n//     // handle success\r\n    \r\n//   })\r\n//   .catch(function (error) {\r\n//     // handle error\r\n//     console.log(error);\r\n//   })\r\n//   .then(data => {\r\n//             console.log(data, \"data\")\r\n//         dispatch({\r\n//                 type: SERVER_DATA,\r\n//                 payload: data\r\n//             })\r\n//   })\r\n// };","import { Component } from \"react\";\r\nimport { getServerData } from './action';\r\nimport { connect } from 'react-redux';\r\nimport {  bindActionCreators } from 'redux';\r\n\r\n class ReduxExample extends Component {\r\n    // state = { \r\n    //     serverData: null,\r\n    //  };\r\n\r\n     componentDidMount(){\r\n         this.props.getServerData();\r\n     }\r\n    render() { \r\n        return ( \r\n            \r\n            <div className='div1'>\r\n            {Object.keys(this.props.data).map((item, index) => {\r\n                console.log(item)\r\n                \r\n                return (\r\n                <div className='div' key ={index}>\r\n                    <h4>{ item }</h4>\r\n                    <p>{`${this.props.data[item]}`}</p>\r\n                </div>\r\n                )\r\n            })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\n\r\n\r\n const mapStateToProps = (state, ownProps) => {\r\n    return {\r\n      data: state.server,\r\n    }\r\n}\r\n\r\n const mapDispatchToProps = (dispatch, ownProps) => {\r\n    return bindActionCreators(\r\n        {\r\n            getServerData\r\n        },\r\n        dispatch,\r\n    );\r\n    }\r\n    export default  connect(mapStateToProps, mapDispatchToProps)(ReduxExample)","\nimport './App.css';\nimport ReduxExample from './reduxExample';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ReduxExample />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {servserReduser} from './reducer';\r\n\r\nconst rootReducer = {\r\n    server: servserReduser\r\n};\r\n\r\nexport default rootReducer;","import { SERVER_DATA } from './const';\r\n\r\n\r\nexport const servserReduser = (state = [], action) => {\r\n    console.log(action.payload)\r\n    switch(action.type){\r\n        case SERVER_DATA:\r\n            \r\n        return {\r\n            ...state,\r\n            ...action.payload\r\n        };\r\n        default:\r\n        return state\r\n    }\r\n}\r\n","\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './rootReduser';\r\n\r\n\r\nconst store = createStore(combineReducers(rootReducer), applyMiddleware(thunk))\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}